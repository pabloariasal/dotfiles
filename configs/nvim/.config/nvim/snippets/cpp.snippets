snippet po "pragma once directive" b
    #pragma once
snippet abc "Abstract Base Class"
    class $1
    {
    public:
        $1() = default;
        virtual ~$1() = default;

        $1(const $1&) = delete;
        $1& operator=(const $1&) = delete;
        $1($1&&) = delete;
        $1& operator=($1&&) = delete;
    };
snippet cla "Class"
    class $1
    {
    public:
        $2
    private:
    };
snippet str "Struct"
    struct $1
    {
        $2
    };
snippet la "Lambda" i
    []($1){$2}
snippet l1 "One argument generic lamdba" i
    [](const auto& $1) { $2 }
snippet l2 "Two argument generic lamdba" i
    [](const auto& $1, const auto& $2) { $3 }
snippet iq "Include Quotes" b
    #include "$1"
snippet ib "Include Brackets" b
    #include <$1>
snippet iv "Include std::vector" b
    #include <vector>
snippet ii "Include std::iostream" b
    #include <iostream>
snippet is "Include std::string" b
    #include <string>
snippet main "main() (main)" b
    int main(int argc, char *argv[])
    {
        $0
        return 0;
    }
snippet fr "for range loop"
    for ($1 : $2)
    {
    $3
    }
snippet fi "for counter"
    for (int i = 0; i < $1; ++i)
    {
        $2
    }
snippet ns "Namespace"
    namespace $1
    {
    $2
    }
snippet nsa "anonymous namespace"
    namespace
    {
    $1
    }
snippet cout "std::cout"
    std::cout << $1 << std::endl;
snippet if "if clause"
    if ($1)
    {
        $2
    }
snippet f "function definition"
    ${1:void} $2($3)
    {
        $0
    }
snippet ft "function definition trailing return type"
    auto $1($2) -> ${3:void}
    {
        $0
    }
snippet fd "function declaration"
    ${1:void} $2($3);
snippet fdt "function declaration trailing return type"
    auto $1($2) -> ${3:void};
snippet todo "TODO"
    // TODO: $0
snippet vc "void cast"
    (void) $0;
snippet ve "std vector" i
    std::vector<$1>
snippet fp "std filesystem path" i
    std::filesystem::path
snippet up "std unique_ptr" i
    std::unique_ptr<$1>
snippet sp "std shared_ptr" i
    std::shared_ptr<$1>
snippet st "std string" i
    std::string
snippet re "return"
    return ${1:\{\}};
snippet cr "const reference" i
    const $1& $0
snippet ad "auto variable declaration"
    auto $1 = $2;
snippet ar "auto reference" i
    auto& $0
snippet ca "const auto" i
    const auto $0
snippet car "const auto reference" i
    const auto& $0
snippet cap "const auto pointer" i
    const auto* $0
snippet fdc "forward declaration class"
    class $1;
snippet fds "forward declaration struct"
    struct $1;
snippet sci "static cast int" i
    static_cast<int>($1)
snippet sc "static cast" i
    static_cast<$1>($2)
snippet be "begin end iterator pair" i
    $1.begin(), $1.end()
snippet cbe "begin end const iterator pair" i
    $1.cbegin(), $1.cend()
snippet mu "mayunused" i
   [[maybe_unused]]
snippet do "default operations"
    $1(const $1&) = delete;
    $1& operator=(const $1&) = delete;
    $1($1&&) = delete;
    $1& operator=($1&&) = delete;
snippet dot "default operations trailing return type"
    $1(const $1&) = delete;
    auto operator=(const $1&) -> $1& = delete;
    $1($1&&) = delete;
    auto operator=($1&&) -> $1& = delete;
snippet ig "include guard"
    #ifndef $1_H_
    #define $1_H_
    #endif
snippet doc "start doxygen doc"
    /**
    * @brief $0
    */
snippet mi i "std::chrono::milliseconds"
    std::chrono::milliseconds
