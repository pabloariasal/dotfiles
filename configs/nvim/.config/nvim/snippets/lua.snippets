snippet p "print"
    print($1)
snippet fa "anonymous function"
    function($1) $0 end
snippet fn "named function"
    function $1($2)
        $3
    end
snippet fm "function in module"
    function M.$1($2)
        $0
    end
snippet fl "local function"
    local function $1($2)
        $0
    end
snippet mod "module"
    local M = {}
        $0
    return M
snippet rp "return plain"
    return
snippet re "return"
    return $1
snippet if "if"
    if $1 then
        $0
    end
snippet ife "if else"
    if $1 then
        $2
    else
        $0
    end
snippet for "for loop generic (iterator)"
    for $1 in $2 do
        $0
    end
snippet fi "for numeric"
    for ${1:i}=$2,$3 do
        $0
    end
snippet fip "for ipairs"
    for ${1:_},${2:v} in ipairs($3) do
        $0
    end
snippet fp "for pairs"
    for k,v in pairs($1) do
        $0
    end
snippet l "local"
    local $0
snippet lv "local variable"
    local $1 = $0
snippet as "assert"
    assert($1)
snippet asm "assert message"
    assert($1, $2)
snippet let "local empty table"
    local ${1:result} = {}
snippet req "require
    local $1 = require '$2'
snippet pi "print inspect"
    print(inspect($1))
