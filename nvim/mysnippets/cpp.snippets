snippet po "pragma once directive" b
#pragma once
endsnippet

snippet abc "Abstract Base Class"
class $1
{
public:
    $1() = default;
    virtual ~$1() = default;

    $1(const $1&) = delete;
    $1& operator=(const $1&) = delete;
    $1($1&&) = delete;
    $1& operator=($1&&) = delete;
};
endsnippet

snippet class "Class"
class $1
{
public:
    $2
private:
};
endsnippet

snippet struct "Struct"
struct $1
{
    $2
};
endsnippet

snippet la "Lambda" i
[]($1){$2}
endsnippet

snippet l1 "One argument lamdba" i
[](const auto& $1) { $2 }
endsnippet

snippet l2 "Two argument lamdba" i
[](const auto& $1, const auto& $2) { $3 }
endsnippet

snippet iq "Include Quotes" b
#include "$1"
endsnippet

snippet ib "Include Brackets" b
#include <$1>
endsnippet

snippet main "main() (main)" b
int main(int argc, char *argv[])
{
    $1
    return EXIT_SUCCESS;
}
endsnippet

snippet fr "For Range Loop"
for ($1 : $2)
{
$3
}
endsnippet

snippet fi "For Counter"
for (int i = 0; i < $1; ++i)
{
    $2
}
endsnippet

snippet ns "Namespace"
namespace $1
{
$2
}
endsnippet

snippet nsa "Anonymous Namespace"
namespace
{
$1
}
endsnippet

snippet cout "std::cout"
std::cout << $1 << std::endl;
endsnippet

snippet if "If Clause"
if ($1)
{
    $2
}
endsnippet

snippet ife "If-else Clause"
if ($1)
{
    $2
}
else
{
    $3
}
endsnippet

snippet fun "Function Definition"
${1:void} $2($3)
{
    $4
}
endsnippet

snippet fd "Function Declaration"
${1:void} $2($3);
endsnippet

snippet be "Begin/End Iterators" i
$1.begin(), $1.end()
endsnippet

snippet cbe "Const Begin/End Iterators" i
$1.cbegin(), $1.cend()
endsnippet

snippet todo "TODO"
// TODO: 
endsnippet

snippet vc "Void cast"
(void) $0;
endsnippet

snippet ve "std vector" i
std::vector<$1>
endsnippet

snippet st "std string" i
std::string
endsnippet

snippet fs "fs path" i
fs::path
endsnippet

snippet re "return"
return $1;
endsnippet

snippet cr "const reference" i
const $1&
endsnippet

snippet ca "const auto" 1
const auto 
endsnippet

snippet car "const auto reference" i
const auto& 
endsnippet

snippet cap "const auto pointer" i
const auto* 
endsnippet
